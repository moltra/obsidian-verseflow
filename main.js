/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var E=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var j=Object.prototype.hasOwnProperty;var q=(x,F)=>{for(var t in F)E(x,t,{get:F[t],enumerable:!0})},H=(x,F,t,e)=>{if(F&&typeof F=="object"||typeof F=="function")for(let a of U(F))!j.call(x,a)&&a!==t&&E(x,a,{get:()=>F[a],enumerable:!(e=L(F,a))||e.enumerable});return x};var W=x=>H(E({},"__esModule",{value:!0}),x);var X={};q(X,{default:()=>R});module.exports=W(X);var c=require("obsidian"),z={planPath:"chronological_plan.vault.json",progressPath:"Bible-Progress.md",mapPath:"bible-read-map.json",eventsPath:"Bible-Read-Events.md",useMap:!0,maxToday:40,previewCount:20,includeDashboardLink:!0,setupOnFirstEnable:!1,initialized:!1,notesBasePath:"VerseNotes",notesSuffix:".notes.md"},R=class extends c.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new J(this.app,this));try{this.settings.setupOnFirstEnable&&!this.settings.initialized&&(await this.setupVerseFlowFiles(),this.settings.initialized=!0,await this.saveSettings())}catch(t){}this.addCommand({id:"vf-insert-today-target",name:"Insert Today\u2019s Target",callback:()=>this.insertTodayTarget()}),this.addCommand({id:"vf-finalize",name:"Finalize Bible Read",callback:()=>this.finalizeBibleRead()}),this.addCommand({id:"vf-clear-checkboxes",name:"Clear Bible Checkboxes",callback:()=>this.clearBibleCheckboxes()}),this.addCommand({id:"vf-seed-map-from-progress",name:"Seed Map From Progress",callback:()=>this.seedMapFromProgress()}),this.addCommand({id:"vf-recompute-progress-from-map",name:"Recompute Progress From Map",callback:()=>this.recomputeProgressFromMapCommand()}),this.addCommand({id:"vf-rebuild-map-from-events",name:"Rebuild Map From Events",callback:()=>this.rebuildMapFromEventsCommand()}),this.addCommand({id:"vf-open-dashboard",name:"Open Bible Dashboard",callback:()=>this.openBibleDashboard()}),this.addCommand({id:"vf-insert-progress-summary",name:"Insert Progress Summary (read-only)",callback:()=>this.insertProgressSummary()}),this.addCommand({id:"vf-setup-notes",name:"Setup VerseFlow Files",callback:()=>this.setupVerseFlowFiles()}),this.addCommand({id:"vf-scaffold-chapter-notes",name:"Scaffold Chapter Notes From Plan",callback:()=>this.scaffoldChapterNotesCommand()});try{this.addRibbonIcon("checkmark","VerseFlow: Finalize Bible Read",()=>this.finalizeBibleRead())}catch(t){}try{this.addRibbonIcon("document","VerseFlow: Insert Today\u2019s Target",()=>this.insertTodayTarget())}catch(t){}try{this.addRibbonIcon("trash","VerseFlow: Clear Bible Checkboxes",()=>this.clearBibleCheckboxes())}catch(t){}}async loadSettings(){this.settings=Object.assign({},z,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}todayISO(){return new Date().toISOString().slice(0,10)}parseDateISO(t){return new Date(`${t}T00:00:00`)}async readJson(t){let e=this.app.vault.getAbstractFileByPath(t);if(!e)return null;try{return JSON.parse(await this.app.vault.read(e))}catch(a){return null}}async writeJson(t,e){let a=this.app.vault.getAbstractFileByPath(t),n=JSON.stringify(e,null,2);a instanceof c.TFile?await this.app.vault.modify(a,n):await this.app.vault.create(t,n)}async readText(t){let e=this.app.vault.getAbstractFileByPath(t);if(!e)return null;try{return await this.app.vault.read(e)}catch(a){return null}}async upsertText(t,e){let a=this.app.vault.getAbstractFileByPath(t);a instanceof c.TFile?await this.app.vault.modify(a,e):await this.app.vault.create(t,e)}getActiveEditor(){var e,a;let t=this.app.workspace.activeLeaf;return(a=(e=t==null?void 0:t.view)==null?void 0:e.editor)!=null?a:null}async readProgress(){var n,s,i,o,r,l;let{progressPath:t}=this.settings,e=this.app.vault.getAbstractFileByPath(t);if(!e)return{last_order:0,verses_read:0,total_verses:31102,start_date:this.todayISO(),target_days:365};let a=(s=(n=this.app.metadataCache.getFileCache(e))==null?void 0:n.frontmatter)!=null?s:{};return{last_order:Number.parseInt((i=a.last_order)!=null?i:0)||0,verses_read:Number.parseInt((o=a.verses_read)!=null?o:0)||0,total_verses:Number.parseInt((r=a.total_verses)!=null?r:31102)||31102,start_date:typeof a.start_date=="string"?a.start_date:this.todayISO(),target_days:Number.parseInt((l=a.target_days)!=null?l:365)||365}}computeFromMap(t,e){let a=0,n=0,s=!1;for(let i=0;i<e;i++){let o=t==null?void 0:t[i];(Array.isArray(o)?o.length>0:!!o)?a++:s||(n=i,s=!0)}return s||(n=e),{uniqueRead:a,firstUnread:n}}async insertTodayTarget(){var M,C,V;let{planPath:t,useMap:e,maxToday:a,previewCount:n}=this.settings,s=await this.readJson(t);if(!Array.isArray(s)||s.length===0){new c.Notice("VerseFlow: plan not found");return}let i=await this.readProgress(),o=i.verses_read,r=i.last_order,l=await this.readJson(this.settings.mapPath);if(e&&l){let y=this.computeFromMap(l,s.length);o=y.uniqueRead,r=y.firstUnread}let d=(M=i.total_verses)!=null?M:s.length,u=this.parseDateISO((C=i.start_date)!=null?C:this.todayISO()),p=this.parseDateISO(this.todayISO()),h=Math.floor((p.getTime()-u.getTime())/864e5)+1;(!Number.isFinite(h)||h<1)&&(h=1);let m=(V=i.target_days)!=null?V:365,w=Math.ceil(d*h/m);(!Number.isFinite(w)||w<0)&&(w=0);let P=Math.max(0,d-o),T=Math.max(1,m-h),v=Math.ceil(P/T);(!Number.isFinite(v)||v<1)&&(v=1);let $=Math.max(1,w-o||v),S=Math.min($,a,Math.max(0,s.length-r)),_=this.getActiveEditor();if(!_){new c.Notice("VerseFlow: no active editor");return}let B=y=>{var b;return(b=y.split("#")[0].split("/").pop())!=null?b:""},g=y=>y.split("#")[0].replace(/\.md$/,""),f=[];this.settings.includeDashboardLink&&f.push("> See [[Bible-Dashboard|Bible Dashboard]] for overall progress."),f.push(`> [!abstract]+ Today's target to stay on schedule (${S})`);let A="";for(let y=0;y<S;y++){let b=s[r+y];if(!b)break;let k=B(b.path),I=g(b.path);k!==A&&(f.push(`> **[[${I}|${k}]]**`),A=k);let O=r+y;f.push(`> - [ ] [[${b.path}|${b.ref}]] (idx:${O})`)}let D=r+S,N=s.slice(D,Math.min(D+n,s.length));f.push(`
> [!abstract]- Next ${N.length} verses after today's target (boundaries shown)`),A="";for(let y=0;y<N.length;y++){let b=N[y],k=B(b.path),I=g(b.path);k!==A&&(f.push(`> **[[${I}|${k}]]**`),A=k);let O=D+y;f.push(`> - [ ] [[${b.path}|${b.ref}]] (idx:${O})`)}_.replaceSelection(f.join(`
`)+`
`)}async setupVerseFlowFiles(){let{progressPath:t,eventsPath:e,mapPath:a}=this.settings,n=async(d,u)=>{this.app.vault.getAbstractFileByPath(d)||await this.app.vault.create(d,u)},i=`---
last_order: 0
verses_read: 0
total_verses: 31102
start_date: ${this.todayISO()}
target_days: 365
---
`;await n(t,i),await n(e,`| timestamp | idx | ref | path |
|---|---:|---|---|
`),await n("Bible-Read-Log.md",`| date | start_ref | end_ref | count | last_order |
|---|---|---|---:|---:|
`),this.app.vault.getAbstractFileByPath(a)||await this.app.vault.create(a,`{}
`);let r="Bible-Dashboard.md";if(!this.app.vault.getAbstractFileByPath(r)){let d=`# Bible Reading Dashboard

- Ensure the Dataview plugin is enabled.

## Progress (DataviewJS)

\`\`\`dataviewjs
const p = dv.page("Bible-Progress");
if (!p) { dv.paragraph("Bible-Progress.md not found"); } else {
  const total = p.total_verses ?? 31102;
  const pct = total ? ((p.verses_read ?? 0) / total * 100).toFixed(1) + "%" : "0.0%";
  dv.table(["last_order","verses_read","total_verses","progress","start_date","target_days"], [[
    p.last_order ?? 0,
    p.verses_read ?? 0,
    total,
    pct,
    p.start_date ?? dv.luxon.DateTime.now().toISODate(),
    p.target_days ?? 365
  ]]);
}
\`\`\`
`;await this.app.vault.create(r,d)}new c.Notice("VerseFlow: setup complete")}async scaffoldChapterNotesCommand(){let{planPath:t,notesBasePath:e,notesSuffix:a}=this.settings,n=await this.readJson(t);if(!Array.isArray(n)||n.length===0){new c.Notice("VerseFlow: plan not found");return}try{this.app.vault.getAbstractFileByPath(e)||await this.app.vault.createFolder(e)}catch(o){}let s=new Set,i=0;for(let o of n){let r=(o.path||"").split("#")[0];if(!r)continue;let l=r.split("/"),d=l.pop()||"",u=l.pop()||"Bible",p=d.replace(/\.md$/i,""),h=`${e}/${u}`,m=`${h}/${p}${a}`;if(s.has(m))continue;s.add(m);try{this.app.vault.getAbstractFileByPath(h)||await this.app.vault.createFolder(h)}catch(P){}if(!this.app.vault.getAbstractFileByPath(m)){let P=`---
title: ${p} Notes
book: ${u}
created: ${this.todayISO()}
---

# ${p} \u2013 Notes

- Notes that may span multiple verses.

## Per-verse

`;await this.app.vault.create(m,P),i++}}new c.Notice(`VerseFlow: scaffolded ${i} chapter note(s) under ${e}`)}async finalizeBibleRead(){var $,S,_,B;let{eventsPath:t,mapPath:e,planPath:a,progressPath:n}=this.settings,s=this.getActiveEditor();if(!s){new c.Notice("VerseFlow: no active editor");return}let i=s.getValue(),o=/\[[xX]\][^\n]*\(idx:(\d+)\)/g,r,l=new Set;for(;(r=o.exec(i))!==null;){let g=Number.parseInt(r[1]);Number.isNaN(g)||l.add(g)}if(l.size===0){new c.Notice("VerseFlow: no checked items found");return}let d=await this.readJson(e)||{},u=new Date,p=new Date(u.getTime()-u.getTimezoneOffset()*6e4).toISOString().slice(0,19),h=[...l].sort((g,f)=>g-f);for(let g of h){Array.isArray(d[g])||(d[g]=[]);let f=d[g];f[f.length-1]!==p&&f.push(p)}await this.writeJson(e,d);let m=await this.readJson(a)||[],w=this.computeFromMap(d,m.length);await this.updateProgressFrontmatter(n,w.firstUnread,w.uniqueRead);let P=`| timestamp | idx | ref | path |
|---|---:|---|---|
`,T="";for(let g of h){let f=m[g];f&&(T+=`| ${p} | ${g} | ${f.ref} | ${f.path} |
`)}let v=this.app.vault.getAbstractFileByPath(t);if(v){let g=await this.app.vault.read(v);/\n\|\s*timestamp\s*\|/.test(g)?await this.app.vault.modify(v,g+T):await this.app.vault.modify(v,g+`
`+P+T)}else await this.app.vault.create(t,P+T);try{let g="Bible-Read-Log.md",f=`| date | start_ref | end_ref | count | last_order |
|---|---|---|---:|---:|
`,A=h[0],D=h[h.length-1],N=(S=($=m[A])==null?void 0:$.ref)!=null?S:"",M=(B=(_=m[D])==null?void 0:_.ref)!=null?B:"",C=`| ${p.slice(0,10)} | ${N} | ${M} | ${h.length} | ${w.firstUnread} |
`,V=this.app.vault.getAbstractFileByPath(g);if(V){let y=await this.app.vault.read(V);/\n\|\s*date\s*\|/.test(y)?await this.app.vault.modify(V,y+C):await this.app.vault.modify(V,y+`
`+f+C)}else await this.app.vault.create(g,f+C)}catch(g){}new c.Notice(`VerseFlow: finalized ${h.length} verse(s)`)}async updateProgressFrontmatter(t,e,a){let n=this.app.vault.getAbstractFileByPath(t);if(!n)return;let s=await this.app.vault.read(n);/^---/.test(s)||(s=`---
---
`+s),/last_order:\s*\d+/i.test(s)?s=s.replace(/last_order:\s*\d+/i,`last_order: ${e}`):s=s.replace(/^---\n/,`---
last_order: ${e}
`),/verses_read:\s*\d+/i.test(s)?s=s.replace(/verses_read:\s*\d+/i,`verses_read: ${a}`):s=s.replace(/^---\n/,`---
verses_read: ${a}
`),await this.app.vault.modify(n,s)}async clearBibleCheckboxes(){let t=this.getActiveEditor();if(!t){new c.Notice("VerseFlow: no active editor");return}let e=t.getValue(),a=e.replace(/\[\s*[xX]\s*\](?=[^\n]*\(idx:\d+\))/g,"[ ]");a!==e&&t.setValue(a),new c.Notice("VerseFlow: cleared checks")}async seedMapFromProgress(){var u;let{mapPath:t,progressPath:e,planPath:a}=this.settings,n=await this.readProgress(),s=await this.readJson(a)||[],i=Math.min((u=n.verses_read)!=null?u:0,s.length),o={},r=new Date,l=new Date(r.getTime()-r.getTimezoneOffset()*6e4).toISOString().slice(0,19);for(let p=0;p<i;p++)o[p]=[l];await this.writeJson(t,o);let d=this.computeFromMap(o,s.length);await this.updateProgressFrontmatter(e,d.firstUnread,d.uniqueRead),new c.Notice(`VerseFlow: seeded ${i} indices from progress`)}async recomputeProgressFromMapCommand(){let{mapPath:t,planPath:e,progressPath:a}=this.settings,n=await this.readJson(t)||{},s=await this.readJson(e)||[],i=this.computeFromMap(n,s.length);await this.updateProgressFrontmatter(a,i.firstUnread,i.uniqueRead),new c.Notice(`VerseFlow: recomputed progress (read=${i.uniqueRead})`)}async rebuildMapFromEventsCommand(){let{eventsPath:t,mapPath:e,planPath:a,progressPath:n}=this.settings,o=(await this.readText(t)||"").split(`
`).filter(u=>u.startsWith("|")&&!/^\|\s*-/.test(u)).slice(1),r={};for(let u of o){let p=u.split("|").map(h=>h.trim());if(p.length>=5){let h=p[1],m=Number(p[2]);if(Number.isFinite(m)&&h){Array.isArray(r[m])||(r[m]=[]);let w=r[m];w[w.length-1]!==h&&w.push(h)}}}await this.writeJson(e,r);let l=await this.readJson(a)||[],d=this.computeFromMap(r,l.length);await this.updateProgressFrontmatter(n,d.firstUnread,d.uniqueRead),new c.Notice(`VerseFlow: rebuilt map from events (${Object.keys(r).length} entries)`)}async openBibleDashboard(){let t="Bible-Dashboard.md",e=this.app.vault.getAbstractFileByPath(t);if(!e){new c.Notice("VerseFlow: dashboard not found");return}await this.app.workspace.getLeaf(!0).openFile(e)}async insertProgressSummary(){var w,P,T,v,$;let t=this.getActiveEditor(),{planPath:e}=this.settings,a=await this.readJson(e)||[],n=await this.readProgress(),s=(w=n.total_verses)!=null?w:a.length,i=this.parseDateISO((P=n.start_date)!=null?P:this.todayISO()),o=this.parseDateISO(this.todayISO()),r=Math.floor((o.getTime()-i.getTime())/864e5)+1;(!Number.isFinite(r)||r<1)&&(r=1);let l=(T=n.target_days)!=null?T:365,d=Math.max(0,s-((v=n.verses_read)!=null?v:0)),u=Math.max(1,l-r),p=Math.ceil(d/u);(!Number.isFinite(p)||p<1)&&(p=1);let h=s?((($=n.verses_read)!=null?$:0)/s*100).toFixed(1):"0.0",m=`> Progress: ${n.verses_read}/${s} (${h}%). Target ${l} days from ${n.start_date}. Today's pace: ${p}.`;if(t)t.replaceSelection(m+`
`);else{let S="VerseFlow-Summary.md",_=await this.readText(S)||"",B=_.endsWith(`
`)||_.length===0?_+m+`
`:_+`
`+m+`
`;await this.upsertText(S,B),new c.Notice(`VerseFlow: summary appended to ${S}`)}}},J=class extends c.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"VerseFlow Settings"});let e=(s,i,o)=>{new c.Setting(t).setName(s).setDesc(i).addText(r=>{var l;return r.setValue(String((l=this.plugin.settings[o])!=null?l:"")).onChange(async d=>{this.plugin.settings[o]=d,await this.plugin.saveSettings()})})},a=(s,i,o)=>{new c.Setting(t).setName(s).setDesc(i).addToggle(r=>r.setValue(!!this.plugin.settings[o]).onChange(async l=>{this.plugin.settings[o]=l,await this.plugin.saveSettings()}))},n=(s,i,o)=>{new c.Setting(t).setName(s).setDesc(i).addText(r=>{var l;return r.setValue(String((l=this.plugin.settings[o])!=null?l:"")).onChange(async d=>{let u=Number.parseInt(d);this.plugin.settings[o]=Number.isFinite(u)?u:z[o],await this.plugin.saveSettings()})})};e("Plan Path","Vault-relative path to chronological plan JSON.","planPath"),e("Progress Path","Vault-relative path to Bible-Progress.md.","progressPath"),e("Map Path","Vault-relative path to bible-read-map.json.","mapPath"),e("Events Path","Vault-relative path to Bible-Read-Events.md.","eventsPath"),a("Use Map","Prefer progress derived from map over frontmatter.","useMap"),n("Max Today","Upper bound for today's target length.","maxToday"),n("Preview Count","How many verses to preview after today's list.","previewCount"),a("Include Dashboard Link","Add a link to Bible-Dashboard at the top of inserted targets.","includeDashboardLink"),a("Run Setup On Enable","Run one-time setup automatically the first time the plugin is enabled.","setupOnFirstEnable"),e("Notes Base Path","Folder to store per-chapter notes (will be created if missing).","notesBasePath"),e("Notes Suffix","File name suffix for chapter notes (e.g., .notes.md).","notesSuffix")}};
