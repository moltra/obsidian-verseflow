/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var Q=Object.defineProperty;var rt=Object.getOwnPropertyDescriptor;var it=Object.getOwnPropertyNames;var ot=Object.prototype.hasOwnProperty;var lt=(T,B)=>{for(var t in B)Q(T,t,{get:B[t],enumerable:!0})},ct=(T,B,t,e)=>{if(B&&typeof B=="object"||typeof B=="function")for(let a of it(B))!ot.call(T,a)&&a!==t&&Q(T,a,{get:()=>B[a],enumerable:!(e=rt(B,a))||e.enumerable});return T};var dt=T=>ct(Q({},"__esModule",{value:!0}),T);var pt={};lt(pt,{default:()=>q});module.exports=dt(pt);var d=require("obsidian"),Y={planPath:"chronological_plan.vault.json",progressPath:"Bible-Progress.md",mapPath:"bible-read-map.json",eventsPath:"Bible-Read-Events.md",useMap:!0,maxToday:40,previewCount:20,includeDashboardLink:!0,setupOnFirstEnable:!1,initialized:!1,notesBasePath:"VerseNotes",notesSuffix:"_notes.md",notesLinkMode:"dual"},q=class extends d.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new tt(this.app,this));try{this.settings.setupOnFirstEnable&&!this.settings.initialized&&(await this.setupVerseFlowFiles(),this.settings.initialized=!0,await this.saveSettings())}catch(t){}this.addCommand({id:"vf-insert-today-target",name:"Insert Today\u2019s Target",editorCallback:()=>this.insertTodayTarget()}),this.addCommand({id:"vf-finalize",name:"Finalize Bible Read",editorCallback:()=>this.finalizeBibleRead()}),this.addCommand({id:"vf-clear-checkboxes",name:"Clear Bible Checkboxes",editorCallback:()=>this.clearBibleCheckboxes()}),this.addCommand({id:"vf-seed-map-from-progress",name:"Seed Map From Progress",callback:()=>this.seedMapFromProgress()}),this.addCommand({id:"vf-recompute-progress-from-map",name:"Recompute Progress From Map",callback:()=>this.recomputeProgressFromMapCommand()}),this.addCommand({id:"vf-rebuild-map-from-events",name:"Rebuild Map From Events",callback:()=>this.rebuildMapFromEventsCommand()}),this.addCommand({id:"vf-open-dashboard",name:"Open Bible Dashboard",callback:()=>this.openBibleDashboard()}),this.addCommand({id:"vf-insert-progress-summary",name:"Insert Progress Summary (read-only)",callback:()=>this.insertProgressSummary()}),this.addCommand({id:"vf-setup-notes",name:"Setup VerseFlow Files",callback:()=>this.setupVerseFlowFiles()}),this.addCommand({id:"vf-scaffold-chapter-notes",name:"Scaffold Chapter Notes From Plan",callback:()=>this.scaffoldChapterNotesCommand()}),this.addCommand({id:"vf-open-chapter-note-at-cursor",name:"Open Chapter Note at Cursor",editorCallback:()=>this.openChapterNoteAtCursor()}),this.addCommand({id:"vf-append-notes-for-checked",name:"Append Notes For Checked Verses",editorCallback:()=>this.appendNotesForChecked()}),this.addCommand({id:"vf-regenerate-dashboard",name:"Regenerate Bible Dashboard",callback:()=>this.regenerateBibleDashboard()});try{this.addRibbonIcon("checkmark","VerseFlow: Finalize Bible Read",()=>this.finalizeBibleRead())}catch(t){}try{this.addRibbonIcon("document","VerseFlow: Insert Today\u2019s Target",()=>this.insertTodayTarget())}catch(t){}try{this.addRibbonIcon("trash","VerseFlow: Clear Bible Checkboxes",()=>this.clearBibleCheckboxes())}catch(t){}}async loadSettings(){this.settings=Object.assign({},Y,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}todayISO(){return new Date().toISOString().slice(0,10)}parseDateISO(t){return new Date(`${t}T00:00:00`)}async readJson(t){let e=this.app.vault.getAbstractFileByPath(t);if(!e)return null;try{return JSON.parse(await this.app.vault.read(e))}catch(a){return null}}async writeJson(t,e){let a=this.app.vault.getAbstractFileByPath(t),n=JSON.stringify(e,null,2);a instanceof d.TFile?await this.app.vault.modify(a,n):await this.app.vault.create(t,n)}async readText(t){let e=this.app.vault.getAbstractFileByPath(t);if(!e)return null;try{return await this.app.vault.read(e)}catch(a){return null}}async upsertText(t,e){let a=this.app.vault.getAbstractFileByPath(t);a instanceof d.TFile?await this.app.vault.modify(a,e):await this.app.vault.create(t,e)}getActiveEditor(){var e,a;let t=this.app.workspace.getActiveViewOfType(d.MarkdownView);return t!=null&&t.editor?t.editor:(a=(e=this.app.workspace.activeEditor)==null?void 0:e.editor)!=null?a:null}np(t){return(0,d.normalizePath)(t)}async readProgress(){var n,r,o,l,s,p;let{progressPath:t}=this.settings,e=this.app.vault.getAbstractFileByPath(t);if(!e)return{last_order:0,verses_read:0,total_verses:31102,start_date:this.todayISO(),target_days:365};let a=(r=(n=this.app.metadataCache.getFileCache(e))==null?void 0:n.frontmatter)!=null?r:{};return{last_order:Number.parseInt((o=a.last_order)!=null?o:0)||0,verses_read:Number.parseInt((l=a.verses_read)!=null?l:0)||0,total_verses:Number.parseInt((s=a.total_verses)!=null?s:31102)||31102,start_date:typeof a.start_date=="string"?a.start_date:this.todayISO(),target_days:Number.parseInt((p=a.target_days)!=null?p:365)||365}}computeFromMap(t,e){let a=0,n=0,r=!1;for(let o=0;o<e;o++){let l=t==null?void 0:t[o];(Array.isArray(l)?l.length>0:!!l)?a++:r||(n=o,r=!0)}return r||(n=e),{uniqueRead:a,firstUnread:n}}async insertTodayTarget(){var C,k,V,et,at;let{planPath:t,useMap:e,maxToday:a,previewCount:n}=this.settings,r=await this.readJson(t);if(!Array.isArray(r)||r.length===0){new d.Notice("VerseFlow: plan not found");return}let o=await this.readProgress(),l=o.verses_read,s=o.last_order,p=await this.readJson(this.settings.mapPath);if(e&&p){let x=this.computeFromMap(p,r.length);l=x.uniqueRead,s=x.firstUnread}let i=(C=o.total_verses)!=null?C:r.length,g=this.parseDateISO((k=o.start_date)!=null?k:this.todayISO()),c=this.parseDateISO(this.todayISO()),h=Math.floor((c.getTime()-g.getTime())/864e5)+1;(!Number.isFinite(h)||h<1)&&(h=1);let u=(V=o.target_days)!=null?V:365,m=Math.ceil(i*h/u);(!Number.isFinite(m)||m<0)&&(m=0);let w=Math.max(0,i-l),P=Math.max(1,u-h),f=Math.ceil(w/P);(!Number.isFinite(f)||f<1)&&(f=1);let _=Math.max(1,m-l||f),$=Math.min(_,a,Math.max(0,r.length-s)),S=this.getActiveEditor();if(!S){new d.Notice("VerseFlow: no active editor");return}let F=x=>{var v;return(v=x.split("#")[0].split("/").pop())!=null?v:""},y=x=>x.split("#")[0].replace(/\.md$/,""),b=[],M=i?((l!=null?l:0)/i*100).toFixed(1):"0.0";b.push(`Progress: ${l}/${i} (${M}%). Target ${u} days from ${o.start_date}. Today's pace: ${f}.`),b.push(`> [!abstract]+ Today's target to stay on schedule (${$})`),b.push("> ");let N="";for(let x=0;x<$;x++){let v=r[s+x];if(!v)break;let A=F(v.path),Z=y(v.path);A!==N&&(b.push(`> **[[${Z}|${A}]]**`),N=A);let E=s+x,I=`[[${v.path}|${v.ref}]]`,L=(v.path||"").split("#")[0].split("/"),H=L.pop()||"",X=L.pop()||"Bible",W=H.replace(/\.md$/i,""),G=(K=>K.replace(/[^A-Za-z0-9]+/g,"_").replace(/^_+|_+$/g,""))(W),J=`${this.settings.notesBasePath}/${X}/${G}${this.settings.notesSuffix}`,z=Number(((v.ref||"").match(/:(\d+)/)||[])[1]),j=Number.isFinite(z)?`#v-${z}`:`#i-${E}`,U=(et=this.settings.notesLinkMode)!=null?et:"dual",D=I;U==="chapter"?D=`[[${J}${j}|${v.ref} notes]]`:U==="dual"&&(D=`${I} \u2022 [[${J}${j}|notes]]`),b.push(`> - [ ] ${D} (idx:${E})`)}let R=s+$,O=r.slice(R,Math.min(R+n,r.length));b.push(`
> [!abstract]- Next ${O.length} verses after today's target (boundaries shown)`),N="";for(let x=0;x<O.length;x++){let v=O[x],A=F(v.path),Z=y(v.path);A!==N&&(b.push(`> **[[${Z}|${A}]]**`),N=A);let E=R+x,I=`[[${v.path}|${v.ref}]]`,L=(v.path||"").split("#")[0].split("/"),H=L.pop()||"",X=L.pop()||"Bible",W=H.replace(/\.md$/i,""),G=(K=>K.replace(/[^A-Za-z0-9]+/g,"_").replace(/^_+|_+$/g,""))(W),J=`${this.settings.notesBasePath}/${X}/${G}${this.settings.notesSuffix}`,z=Number(((v.ref||"").match(/:(\d+)/)||[])[1]),j=Number.isFinite(z)?`#v-${z}`:`#i-${E}`,U=(at=this.settings.notesLinkMode)!=null?at:"dual",D=I;U==="chapter"?D=`[[${J}${j}|${v.ref} notes]]`:U==="dual"&&(D=`${I} \u2022 [[${J}${j}|notes]]`),b.push(`> - [ ] ${D} (idx:${E})`)}S.replaceSelection(b.join(`
`)+`
`)}async setupVerseFlowFiles(){let{progressPath:t,eventsPath:e,mapPath:a}=this.settings,n=async(i,g)=>{this.app.vault.getAbstractFileByPath(i)||await this.app.vault.create(i,g)},o=`---
last_order: 0
verses_read: 0
total_verses: 31102
start_date: ${this.todayISO()}
target_days: 365
---
`;await n(t,o),await n(e,`| timestamp | idx | ref | path |
|---|---:|---|---|
`),await n("Bible-Read-Log.md",`| date | start_ref | end_ref | count | last_order |
|---|---|---|---:|---:|
`),this.app.vault.getAbstractFileByPath(a)||await this.app.vault.create(a,`{}
`);let s="Bible-Dashboard.md";this.app.vault.getAbstractFileByPath(s)||await this.app.vault.create(s,this.getDashboardContent()),new d.Notice("VerseFlow: setup complete")}async scaffoldChapterNotesCommand(){let{planPath:t,notesBasePath:e,notesSuffix:a}=this.settings,n=await this.readJson(t);if(!Array.isArray(n)||n.length===0){new d.Notice("VerseFlow: plan not found");return}try{this.app.vault.getAbstractFileByPath(e)||await this.app.vault.createFolder(e)}catch(l){}let r=new Set,o=0;for(let l of n){let s=(l.path||"").split("#")[0];if(!s)continue;let p=s.split("/"),i=p.pop()||"",g=p.pop()||"Bible",c=i.replace(/\.md$/i,""),u=(f=>f.replace(/[^A-Za-z0-9]+/g,"_").replace(/^_+|_+$/g,""))(c),m=`${e}/${g}`,w=`${m}/${u}${a}`;if(r.has(w))continue;r.add(w);try{this.app.vault.getAbstractFileByPath(m)||await this.app.vault.createFolder(m)}catch(f){}if(!this.app.vault.getAbstractFileByPath(w)){let f=`---
title: ${c} Notes
book: ${g}
created: ${this.todayISO()}
---

# ${c} \u2013 Notes

- Notes that may span multiple verses.

## Per-verse

`;await this.app.vault.create(w,f),o++}}new d.Notice(`VerseFlow: scaffolded ${o} chapter note(s) under ${e}`)}async openChapterNoteAtCursor(){let t=this.getActiveEditor();if(!t){new d.Notice("VerseFlow: no active editor");return}let e=t.getCursor(),a=t.getLine(e.line)||"",n=a.match(/\[\[([^\]|]+)\|([^\]]+)\]\]/),r=a.match(/\(idx:(\d+)\)/);if(!n){new d.Notice("VerseFlow: no verse link on this line");return}let o=n[1],l=n[2],s=Number(((l||"").match(/:(\d+)/)||[])[1]),i=(o||"").split("#")[0].split("/"),g=i.pop()||"",c=i.pop()||"Bible",h=g.replace(/\.md$/i,""),m=(F=>F.replace(/[^A-Za-z0-9]+/g,"_").replace(/^_+|_+$/g,""))(h),w=`${this.settings.notesBasePath}/${c}`,P=`${w}/${m}${this.settings.notesSuffix}`;try{this.app.vault.getAbstractFileByPath(w)||await this.app.vault.createFolder(w)}catch(F){}let f=this.app.vault.getAbstractFileByPath(P);f||(await this.app.vault.create(P,`# ${h} \u2013 Notes

`),f=this.app.vault.getAbstractFileByPath(P));let _=Number.isFinite(s)?`v-${s}`:r?`i-${r[1]}`:"v-1",$=await this.app.vault.read(f);if(!new RegExp(`^#{1,6}\\s+${_}\\b`,"m").test($)){let F=`
### ${_} \u2014 ${l}

`;$+=F,await this.app.vault.modify(f,$)}await this.app.workspace.getLeaf(!0).openFile(f),new d.Notice(`VerseFlow: opened ${m}${this.settings.notesSuffix} at ${_}`)}async finalizeBibleRead(){var _,$,S,F;let{eventsPath:t,mapPath:e,planPath:a,progressPath:n}=this.settings,r=this.getActiveEditor();if(!r){new d.Notice("VerseFlow: no active editor");return}let o=r.getValue(),l=/\[[xX]\][^\n]*\(idx:(\d+)\)/g,s,p=new Set;for(;(s=l.exec(o))!==null;){let y=Number.parseInt(s[1]);Number.isNaN(y)||p.add(y)}if(p.size===0){new d.Notice("VerseFlow: no checked items found");return}let i=await this.readJson(e)||{},g=new Date,c=new Date(g.getTime()-g.getTimezoneOffset()*6e4).toISOString().slice(0,19),h=[...p].sort((y,b)=>y-b);for(let y of h){Array.isArray(i[y])||(i[y]=[]);let b=i[y];b[b.length-1]!==c&&b.push(c)}await this.writeJson(e,i);let u=await this.readJson(a)||[],m=this.computeFromMap(i,u.length);await this.updateProgressFrontmatter(n,m.firstUnread,m.uniqueRead);let w=`| timestamp | idx | ref | path |
|---|---:|---|---|
`,P="";for(let y of h){let b=u[y];b&&(P+=`| ${c} | ${y} | ${b.ref} | ${b.path} |
`)}let f=this.app.vault.getAbstractFileByPath(t);if(f){let y=await this.app.vault.read(f);/\n\|\s*timestamp\s*\|/.test(y)?await this.app.vault.modify(f,y+P):await this.app.vault.modify(f,y+`
`+w+P)}else await this.app.vault.create(t,w+P);try{let y="Bible-Read-Log.md",b=`| date | start_ref | end_ref | count | last_order |
|---|---|---|---:|---:|
`,M=h[0],N=h[h.length-1],R=($=(_=u[M])==null?void 0:_.ref)!=null?$:"",O=(F=(S=u[N])==null?void 0:S.ref)!=null?F:"",C=`| ${c.slice(0,10)} | ${R} | ${O} | ${h.length} | ${m.firstUnread} |
`,k=this.app.vault.getAbstractFileByPath(y);if(k){let V=await this.app.vault.read(k);/\n\|\s*date\s*\|/.test(V)?await this.app.vault.modify(k,V+C):await this.app.vault.modify(k,V+`
`+b+C)}else await this.app.vault.create(y,b+C)}catch(y){}new d.Notice(`VerseFlow: finalized ${h.length} verse(s)`)}async updateProgressFrontmatter(t,e,a){let n=this.app.vault.getAbstractFileByPath(this.np(t));n&&await this.app.fileManager.processFrontMatter(n,r=>{r.last_order=e,r.verses_read=a})}async clearBibleCheckboxes(){let t=this.getActiveEditor();if(!t){new d.Notice("VerseFlow: no active editor");return}let e=t.getValue(),a=e.replace(/\[\s*[xX]\s*\](?=[^\n]*\(idx:\d+\))/g,"[ ]");a!==e&&t.setValue(a),new d.Notice("VerseFlow: cleared checks")}async seedMapFromProgress(){var g;let{mapPath:t,progressPath:e,planPath:a}=this.settings,n=await this.readProgress(),r=await this.readJson(a)||[],o=Math.min((g=n.verses_read)!=null?g:0,r.length),l={},s=new Date,p=new Date(s.getTime()-s.getTimezoneOffset()*6e4).toISOString().slice(0,19);for(let c=0;c<o;c++)l[c]=[p];await this.writeJson(t,l);let i=this.computeFromMap(l,r.length);await this.updateProgressFrontmatter(e,i.firstUnread,i.uniqueRead),new d.Notice(`VerseFlow: seeded ${o} indices from progress`)}async recomputeProgressFromMapCommand(){let{mapPath:t,planPath:e,progressPath:a}=this.settings,n=await this.readJson(t)||{},r=await this.readJson(e)||[],o=this.computeFromMap(n,r.length);await this.updateProgressFrontmatter(a,o.firstUnread,o.uniqueRead),new d.Notice(`VerseFlow: recomputed progress (read=${o.uniqueRead})`)}async rebuildMapFromEventsCommand(){let{eventsPath:t,mapPath:e,planPath:a,progressPath:n}=this.settings,l=(await this.readText(t)||"").split(`
`).filter(g=>g.startsWith("|")&&!/^\|\s*-/.test(g)).slice(1),s={};for(let g of l){let c=g.split("|").map(h=>h.trim());if(c.length>=5){let h=c[1],u=Number(c[2]);if(Number.isFinite(u)&&h){Array.isArray(s[u])||(s[u]=[]);let m=s[u];m[m.length-1]!==h&&m.push(h)}}}await this.writeJson(e,s);let p=await this.readJson(a)||[],i=this.computeFromMap(s,p.length);await this.updateProgressFrontmatter(n,i.firstUnread,i.uniqueRead),new d.Notice(`VerseFlow: rebuilt map from events (${Object.keys(s).length} entries)`)}async openBibleDashboard(){let t="Bible-Dashboard.md",e=this.app.vault.getAbstractFileByPath(t);if(!e){new d.Notice("VerseFlow: dashboard not found");return}await this.app.workspace.getLeaf(!0).openFile(e)}getDashboardContent(){return`# Bible Reading Dashboard

- **Overview**: Live progress and history powered by VerseFlow + Dataview.
- Ensure the Dataview plugin is enabled and DataviewJS is allowed.

## Progress (DataviewJS)

\`\`\`dataviewjs
{
  const p = dv.page("Bible-Progress");
  if (!p) { dv.paragraph("Bible-Progress.md not found"); } else {
    const total = p.total_verses ?? 31102;
    const pct = total ? ((p.verses_read ?? 0) / total * 100).toFixed(1) + "%" : "0.0%";
    dv.table([
      "last_order","verses_read","total_verses","progress","start_date","target_days"
    ], [[
      p.last_order ?? 0,
      p.verses_read ?? 0,
      total,
      pct,
      p.start_date ?? dv.luxon.DateTime.now().toISODate(),
      p.target_days ?? 365
    ]]);
  }
}
\`\`\`

## Recommended pace today (DataviewJS)

\`\`\`dataviewjs
{
  const p = dv.page("Bible-Progress");
  if (!p) { dv.el("div", "Bible-Progress.md not found"); } else {
    const total = p.total_verses ?? 31102;
    const start = new Date((p.start_date ?? dv.current().file.ctime.toISODate()) + "T00:00:00");
    const today = new Date(dv.current().file.cday.toISODate() + "T00:00:00");
    const daysElapsed = Math.max(1, Math.floor((today - start) / 86400000) + 1);
    const targetDays = p.target_days ?? 365;
    const expected = Math.ceil((total * daysElapsed) / targetDays);
    const remaining = Math.max(0, total - (p.verses_read ?? 0));
    const daysRemaining = Math.max(1, targetDays - daysElapsed);
    const pace = Math.max(1, Math.ceil(remaining / daysRemaining));
    const catchup = Math.max(0, expected - (p.verses_read ?? 0));
    dv.paragraph(\`Recommended today: \${catchup || pace} verses (pace \${pace}, catch-up \${catchup}).\`);
  }
}
\`\`\`
`}async regenerateBibleDashboard(){let t="Bible-Dashboard.md",e=this.app.vault.getAbstractFileByPath(t),a=this.getDashboardContent();e?await this.app.vault.modify(e,a):await this.app.vault.create(t,a),new d.Notice("VerseFlow: Bible-Dashboard regenerated")}async insertProgressSummary(){var m,w,P,f,_;let t=this.getActiveEditor(),{planPath:e}=this.settings,a=await this.readJson(e)||[],n=await this.readProgress(),r=(m=n.total_verses)!=null?m:a.length,o=this.parseDateISO((w=n.start_date)!=null?w:this.todayISO()),l=this.parseDateISO(this.todayISO()),s=Math.floor((l.getTime()-o.getTime())/864e5)+1;(!Number.isFinite(s)||s<1)&&(s=1);let p=(P=n.target_days)!=null?P:365,i=Math.max(0,r-((f=n.verses_read)!=null?f:0)),g=Math.max(1,p-s),c=Math.ceil(i/g);(!Number.isFinite(c)||c<1)&&(c=1);let h=r?(((_=n.verses_read)!=null?_:0)/r*100).toFixed(1):"0.0",u=`> Progress: ${n.verses_read}/${r} (${h}%). Target ${p} days from ${n.start_date}. Today's pace: ${c}.`;if(this.settings.includeDashboardLink&&(u+=" See [[Bible-Dashboard|Bible Dashboard]] for overall progress."),t)t.replaceSelection(u+`
`);else{let $="VerseFlow-Summary.md",S=await this.readText($)||"",F=S.endsWith(`
`)||S.length===0?S+u+`
`:S+`
`+u+`
`;await this.upsertText($,F),new d.Notice(`VerseFlow: summary appended to ${$}`)}}async appendNotesForChecked(){let t=this.getActiveEditor();if(!t){new d.Notice("VerseFlow: no active editor");return}let e=t.getValue(),a=/^>\s*-\s*\[(?:x|X)\]\s*(.*?)(\(idx:(\d+)\))?\s*$/gm,n=/\[\[([^\]|]+)\|([^\]]+)\]\]/,r={},o;for(;(o=a.exec(e))!==null;){let i=o[0].match(n);if(!i)continue;let g=i[1],c=i[2],h=o[3],m=(g||"").split("#")[0].split("/"),w=m.pop()||"",P=m.pop()||"Bible",f=w.replace(/\.md$/i,""),$=(M=>M.replace(/[^A-Za-z0-9]+/g,"_").replace(/^_+|_+$/g,""))(f),S=`${this.settings.notesBasePath}/${P}`,F=`${S}/${$}${this.settings.notesSuffix}`,y=Number(((c||"").match(/:(\d+)/)||[])[1]),b=Number.isFinite(y)?`v-${y}`:h?`i-${h}`:"v-1";r[F]||(r[F]=[]),r[F].push({destDir:S,destPath:F,anchor:b,ref:c,chapterBase:f})}let l=0,s=0;for(let[p,i]of Object.entries(r)){let{destDir:g}=i[0];try{this.app.vault.getAbstractFileByPath(g)||await this.app.vault.createFolder(g)}catch(u){}let c=this.app.vault.getAbstractFileByPath(p);c||(await this.app.vault.create(p,`# ${i[0].chapterBase} \u2013 Notes

`),c=this.app.vault.getAbstractFileByPath(p),l++);let h=await this.app.vault.read(c);for(let u of i)if(!new RegExp(`^#{1,6}\\s+${u.anchor}\\b`,"m").test(h)){let m=`
### ${u.anchor} \u2014 ${u.ref}

- `;h+=m,s++}await this.app.vault.modify(c,h)}new d.Notice(`VerseFlow: updated ${Object.keys(r).length} note(s), added ${s} anchor(s)`)}},tt=class extends d.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"VerseFlow Settings"});let e=(o,l,s)=>{new d.Setting(t).setName(o).setDesc(l).addText(p=>{var i;return p.setValue(String((i=this.plugin.settings[s])!=null?i:"")).onChange(async g=>{this.plugin.settings[s]=g,await this.plugin.saveSettings()})})},a=(o,l,s)=>{new d.Setting(t).setName(o).setDesc(l).addToggle(p=>p.setValue(!!this.plugin.settings[s]).onChange(async i=>{this.plugin.settings[s]=i,await this.plugin.saveSettings()}))},n=(o,l,s)=>{new d.Setting(t).setName(o).setDesc(l).addText(p=>{var i;return p.setValue(String((i=this.plugin.settings[s])!=null?i:"")).onChange(async g=>{let c=Number.parseInt(g);this.plugin.settings[s]=Number.isFinite(c)?c:Y[s],await this.plugin.saveSettings()})})},r=(o,l,s,p)=>{new d.Setting(t).setName(o).setDesc(l).addDropdown(i=>{var g;Object.entries(p).forEach(([c,h])=>i.addOption(c,h)),i.setValue(String((g=this.plugin.settings[s])!=null?g:Y[s])).onChange(async c=>{this.plugin.settings[s]=c,await this.plugin.saveSettings()})})};e("Plan Path","Vault-relative path to chronological plan JSON.","planPath"),e("Progress Path","Vault-relative path to Bible-Progress.md.","progressPath"),e("Map Path","Vault-relative path to bible-read-map.json.","mapPath"),e("Events Path","Vault-relative path to Bible-Read-Events.md.","eventsPath"),a("Use Map","Prefer progress derived from map over frontmatter.","useMap"),n("Max Today","Upper bound for today's target length.","maxToday"),n("Preview Count","How many verses to preview after today's list.","previewCount"),a("Include Dashboard Link","Add a link to Bible-Dashboard at the top of inserted targets.","includeDashboardLink"),a("Run Setup On Enable","Run one-time setup automatically the first time the plugin is enabled.","setupOnFirstEnable"),e("Notes Base Path","Folder to store per-chapter notes (will be created if missing).","notesBasePath"),e("Notes Suffix","File name suffix for chapter notes (e.g., _notes.md).","notesSuffix"),r("Notes Link Mode","How links appear in Today's Target: verse only, chapter-note only, or both.","notesLinkMode",{verse:"Verse only",chapter:"Chapter note only",dual:"Verse + notes (default)"})}};
